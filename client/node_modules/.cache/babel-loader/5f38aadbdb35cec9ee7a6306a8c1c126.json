{"ast":null,"code":"var _jsxFileName = \"/Users/boubou/Documents/projets/FORMATIONS/React/testReactApi/client/src/components/Signup/Signup.js\";\nimport React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport errorHelper from \"../../helpers/errorHelper\";\nimport { formConstants } from \"../../constants/formConstants\";\nimport { FormInput } from \"../Commons/FormInput/FormInput\";\nimport { FormInputSelect } from \"../Commons/FormSelect/FormInputSelect\";\nimport userActions from \"../../redux/actions/userActions\";\nexport function Signup() {\n  let navigate = useNavigate();\n  const dispatch = useDispatch(); //const [showMessage, setShowMessage] = useState({});\n\n  const [formErrors, setFormErrors] = useState({});\n  const [formValues, setFormValues] = useState({\n    email: \"\",\n    password: \"\",\n    cpassword: \"\",\n    nomUser: \"\",\n    droitsCreation: false,\n    droitsEdition: false\n  });\n  const {\n    email,\n    password,\n    nomUser,\n    droitsCreation,\n    droitsEdition\n  } = formValues;\n  /**\n   * Fonction appelée à la validation du formulaire\n   * @param {*} values\n   */\n\n  const validateForm = values => {\n    let errors = {};\n\n    for (const [key, value] of Object.entries(values)) {\n      const droitsCreaOrEdit = key === formConstants.droitsCreation.nomChamp || key === formConstants.droitsEdition.nomChamp;\n\n      if (!value && !droitsCreaOrEdit) {\n        errors[key] = errorHelper.buildErrorFieldRequired(formConstants[key].libelleChamp);\n      }\n\n      const passwordOrConfirmPassword = key === formConstants.password.nomChamp || key === formConstants.cpassword.nomChamp;\n\n      if (passwordOrConfirmPassword && values.password !== values.cpassword) {\n        errors.password = \"Les deux mots de passe ne sont pas identiques\";\n        errors.cpassword = \"Les deux mots de passe ne sont pas identiques\";\n      } //email field\n\n\n      if (key === formConstants.email.nomChamp && !/\\S+@\\S+\\.\\S+/.test(values.email)) {\n        errors.email = errorHelper.buildErrorMessageFormat(formConstants[key].libelleChamp);\n      }\n    }\n\n    setFormErrors(errors);\n\n    if (Object.keys(errors).length === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const navToAccueil = () => navigate(\"/\");\n  /**\n   * Fonction appelée au clic sur le bouton de validation du formulaire\n   */\n\n\n  const send = () => {\n    // if (!email || email.length === 0) return;\n    // if (!password || password.length === 0 || password !== cpassword) return;\n    if (validateForm(formValues)) {\n      dispatch(userActions.createUser({\n        email,\n        password,\n        nomUser,\n        droitsCreation,\n        droitsEdition\n      }, navToAccueil));\n    }\n  };\n  /**\n   * Fonction appelée lors d'un changement sur un champ\n   * @param {*} event\n   */\n\n\n  const handleChange = event => {\n    setFormErrors({ ...formErrors,\n      [event.target.name]: \"\"\n    });\n    setFormValues({ ...formValues,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"title-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, \"Cr\\xE9ation d'utilisateur\"), /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    handleChange: handleChange,\n    formField: formConstants[\"email\"],\n    type: \"email\",\n    value: formValues[\"email\"],\n    formErrors: formErrors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    handleChange: handleChange,\n    formField: formConstants[\"password\"],\n    type: \"password\",\n    value: formValues[\"password\"],\n    formErrors: formErrors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    handleChange: handleChange,\n    formField: formConstants[\"cpassword\"],\n    type: \"password\",\n    value: formValues[\"cpassword\"],\n    formErrors: formErrors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    handleChange: handleChange,\n    formField: formConstants[\"nomUser\"],\n    type: \"text\",\n    value: formValues[\"nomUser\"],\n    formErrors: formErrors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormInputSelect, {\n    handleChange: handleChange,\n    formField: formConstants[\"droitsCreation\"],\n    type: \"text\",\n    value: formValues[\"droitsCreation\"],\n    formErrors: formErrors,\n    options: [{\n      value: true,\n      label: \"true\"\n    }, {\n      value: false,\n      label: \"false\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormInputSelect, {\n    handleChange: handleChange,\n    formField: formConstants[\"droitsEdition\"],\n    type: \"text\",\n    value: formValues[\"droitsEdition\"],\n    formErrors: formErrors,\n    options: [{\n      value: true,\n      label: \"true\"\n    }, {\n      value: false,\n      label: \"false\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"submit-button my-3\",\n    onClick: send,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, \"Inscription\"));\n}","map":{"version":3,"sources":["/Users/boubou/Documents/projets/FORMATIONS/React/testReactApi/client/src/components/Signup/Signup.js"],"names":["React","useState","Button","Form","useDispatch","useNavigate","errorHelper","formConstants","FormInput","FormInputSelect","userActions","Signup","navigate","dispatch","formErrors","setFormErrors","formValues","setFormValues","email","password","cpassword","nomUser","droitsCreation","droitsEdition","validateForm","values","errors","key","value","Object","entries","droitsCreaOrEdit","nomChamp","buildErrorFieldRequired","libelleChamp","passwordOrConfirmPassword","test","buildErrorMessageFormat","keys","length","navToAccueil","send","createUser","handleChange","event","target","name","label"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport errorHelper from \"../../helpers/errorHelper\";\nimport { formConstants } from \"../../constants/formConstants\";\nimport { FormInput } from \"../Commons/FormInput/FormInput\";\nimport { FormInputSelect } from \"../Commons/FormSelect/FormInputSelect\";\nimport userActions from \"../../redux/actions/userActions\";\n\nexport function Signup() {\n  let navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  //const [showMessage, setShowMessage] = useState({});\n  const [formErrors, setFormErrors] = useState({});\n  const [formValues, setFormValues] = useState({\n    email: \"\",\n    password: \"\",\n    cpassword: \"\",\n    nomUser: \"\",\n    droitsCreation: false,\n    droitsEdition: false\n  });\n\n  const {\n    email,\n    password,\n    nomUser,\n    droitsCreation,\n    droitsEdition\n  } = formValues;\n\n  /**\n   * Fonction appelée à la validation du formulaire\n   * @param {*} values\n   */\n  const validateForm = values => {\n    let errors = {};\n    for (const [key, value] of Object.entries(values)) {\n      const droitsCreaOrEdit =\n        key === formConstants.droitsCreation.nomChamp ||\n        key === formConstants.droitsEdition.nomChamp;\n\n      if (!value && !droitsCreaOrEdit) {\n        errors[key] = errorHelper.buildErrorFieldRequired(\n          formConstants[key].libelleChamp\n        );\n      }\n\n      const passwordOrConfirmPassword =\n        key === formConstants.password.nomChamp ||\n        key === formConstants.cpassword.nomChamp;\n      if (passwordOrConfirmPassword && values.password !== values.cpassword) {\n        errors.password = \"Les deux mots de passe ne sont pas identiques\";\n        errors.cpassword = \"Les deux mots de passe ne sont pas identiques\";\n      }\n\n      //email field\n      if (\n        key === formConstants.email.nomChamp &&\n        !/\\S+@\\S+\\.\\S+/.test(values.email)\n      ) {\n        errors.email = errorHelper.buildErrorMessageFormat(\n          formConstants[key].libelleChamp\n        );\n      }\n    }\n    setFormErrors(errors);\n\n    if (Object.keys(errors).length === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const navToAccueil = () => navigate(\"/\");\n\n  /**\n   * Fonction appelée au clic sur le bouton de validation du formulaire\n   */\n  const send = () => {\n    // if (!email || email.length === 0) return;\n    // if (!password || password.length === 0 || password !== cpassword) return;\n    if (validateForm(formValues)) {\n      dispatch(\n        userActions.createUser(\n          {\n            email,\n            password,\n            nomUser,\n            droitsCreation,\n            droitsEdition\n          },\n          navToAccueil\n        )\n      );\n    }\n  };\n\n  /**\n   * Fonction appelée lors d'un changement sur un champ\n   * @param {*} event\n   */\n  const handleChange = event => {\n    setFormErrors({ ...formErrors, [event.target.name]: \"\" });\n    setFormValues({\n      ...formValues,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  return (\n    <div className=\"Login\">\n      <h2 className=\"title-page\">Création d'utilisateur</h2>\n      <Form>\n        <FormInput\n          handleChange={handleChange}\n          formField={formConstants[\"email\"]}\n          type=\"email\"\n          value={formValues[\"email\"]}\n          formErrors={formErrors}\n        />\n        <FormInput\n          handleChange={handleChange}\n          formField={formConstants[\"password\"]}\n          type=\"password\"\n          value={formValues[\"password\"]}\n          formErrors={formErrors}\n        />\n        <FormInput\n          handleChange={handleChange}\n          formField={formConstants[\"cpassword\"]}\n          type=\"password\"\n          value={formValues[\"cpassword\"]}\n          formErrors={formErrors}\n        />\n        <FormInput\n          handleChange={handleChange}\n          formField={formConstants[\"nomUser\"]}\n          type=\"text\"\n          value={formValues[\"nomUser\"]}\n          formErrors={formErrors}\n        />\n        <FormInputSelect\n          handleChange={handleChange}\n          formField={formConstants[\"droitsCreation\"]}\n          type=\"text\"\n          value={formValues[\"droitsCreation\"]}\n          formErrors={formErrors}\n          options={[\n            { value: true, label: \"true\" },\n            { value: false, label: \"false\" }\n          ]}\n        />\n        <FormInputSelect\n          handleChange={handleChange}\n          formField={formConstants[\"droitsEdition\"]}\n          type=\"text\"\n          value={formValues[\"droitsEdition\"]}\n          formErrors={formErrors}\n          options={[\n            { value: true, label: \"true\" },\n            { value: false, label: \"false\" }\n          ]}\n        />\n      </Form>\n      <Button className=\"submit-button my-3\" onClick={send} type=\"submit\">\n        Inscription\n      </Button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}